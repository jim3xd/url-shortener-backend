package com.assignments.shorturl.service;

import com.assignments.shorturl.Repository.UrlRepository;
import com.assignments.shorturl.common.UrlCommon;
import com.assignments.shorturl.exception.UrlShorterException;
import com.assignments.shorturl.model.UrlDto;
import com.assignments.shorturl.model.UrlEntity;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.validator.routines.UrlValidator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.NoSuchElementException;

@Slf4j
@Service
public class UrlServiceImpl implements UrlService {

    @Autowired
    private UrlRepository urlRepository;

    @Value("${application.endpoint}")
    private String appUrl;

    @Override
    public void validate(String originalUrl) throws UrlShorterException {

        UrlValidator validator = new UrlValidator();
        if (!validator.isValid(originalUrl)) {
            log.error("UrlValidator : Invalid URL provided");
            throw new UrlShorterException("Invalid Url Provided", HttpStatus.BAD_REQUEST);
        }
    }

    @Override
    public UrlEntity shortenUrl(String originalUrl) throws UrlShorterException {
        this.validate(originalUrl);
        // Generating the Shortened url and concatenating with http://localhost:8080/s/
        UrlEntity shortUrl = this.getShortUrl(originalUrl);
        log.info(String.format("ShortUrl for originalUrl %s is %s", shortUrl.getOriginalUrl(), shortUrl.getShortUrl()));
        return shortUrl;
    }

    @Override
    public UrlDto getAllUrls() {
        return new UrlDto(urlRepository.findAll());
    }


    /**
     * Uses the Base62 encoded to convert to Base10 number id
     * and fetches the corresponding original Url from the database
     *
     * @param shortString Base62 encoded string
     * @return FullUrl string
     */
    @Override
    public String getOriginalUrl(String shortString) {
        log.info("Converting shortened String to Base 10 id");
        Long id = UrlCommon.strToId(shortString);
        log.info(String.format("Converted Base 62 string %s to Base 10 id %s", shortString, id));
        log.info(String.format("Retrieving full url for %d", id));
        return this.getUrlEntity(id).getOriginalUrl();
    }

    /**
     * It saves the originalUrl to database and uses the autogenerated id to convert to Base62 string
     * and then concatenates the shortString with http://localhost:8080/s/
     *
     * @param originalUrl FullUrl object to be converted to shortened url
     * @return ShortUrl object
     */
    private UrlEntity getShortUrl(String originalUrl) throws UrlShorterException {


        log.info("Checking if the url already exists");
        List<UrlEntity> savedUrls = checkFullUrlAlreadyExists(originalUrl);

        UrlEntity savedUrl = null;

        if (savedUrls.isEmpty()) {
            log.info(String.format("Saving Url %s to database", originalUrl));
            savedUrl = urlRepository.save(new UrlEntity(originalUrl));
            log.info(savedUrl.toString());
            log.info(String.format("Converting Base 10 %d to Base 62 string", savedUrl.getId()));
            String shortUrlText = UrlCommon.idToStr(savedUrl.getId());
            log.info(String.format("Converted Base 10 %d to Base 62 string %s", savedUrl.getId(), shortUrlText));
            savedUrl.setShortUrl(appUrl + "s/" + shortUrlText);
            savedUrl = urlRepository.save(savedUrl);

        } else {
            savedUrl = savedUrls.get(0);
            log.info(String.format("url: %s already exists in the database. skipped insert", savedUrl));
        }

        return savedUrl;
    }


    /**
     * Check if Url already exists in the database to prevent having same url stored multiple times
     *
     * @param fullUrl
     * @return list of UrlEntity objects, list will be empty if no results found
     */
    private List<UrlEntity> checkFullUrlAlreadyExists(String fullUrl) {
        return urlRepository.findUrlByFullUrl(fullUrl);
    }


    /**
     * Used to get the original Url and increase the usage counter by 1
     *
     * @param id
     * @return UrlEntity object from DB
     */
    private UrlEntity getUrlEntity(Long id) {

        UrlEntity urlEntity = urlRepository.findById(id).orElseThrow(() -> new NoSuchElementException("No suchUrl Entity Found"));

        //Increasing usage Counter
        urlEntity.setUsageCount(urlEntity.getUsageCount() + 1);
        return urlRepository.save(urlEntity);


    }
}
