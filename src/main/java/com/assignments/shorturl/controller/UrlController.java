package com.assignments.shorturl.controller;

import com.assignments.shorturl.exception.UrlShorterException;
import com.assignments.shorturl.model.ApiResponse;
import com.assignments.shorturl.model.UrlEntity;
import com.assignments.shorturl.service.UrlService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.NoSuchElementException;

@Slf4j
@RestController
@RequestMapping
@CrossOrigin(origins = "*", allowedHeaders = "*")
public class UrlController {

    @Autowired
    private UrlService urlService;

    /**
     *
     * @param urlEntity
     * @return Shorten Url
     * @throws UrlShorterException
     */
    @PostMapping("/shorten")
    public ResponseEntity<Object> shortenUrl(@RequestBody UrlEntity urlEntity) throws UrlShorterException {
        return ResponseEntity.ok().body(urlService.shortenUrl(urlEntity.getOriginalUrl()));
    }

    /**
     *
     * @return all Shortened urls, its respective original url along with the usage count
     */
    @GetMapping("/urls")
    public ResponseEntity<Object> getAllUrls() {
        return ResponseEntity.ok().body(urlService.getAllUrls());
    }



    /**
     * @param shortString Shortened string - Text is Base62 encoded generated by "/shorten"
     */
    @GetMapping("/s/{shortString}")
    public ResponseEntity<?> redirectToOriginalUrl(@PathVariable String shortString) {
        try {
        String originalUrl = urlService.getOriginalUrl(shortString);
        log.info("Redirecting to " + originalUrl);
        // Redirects the response to the Original url
        HttpHeaders headers = new HttpHeaders();
        headers.add("Location", originalUrl);
        return new ResponseEntity<String>(headers, HttpStatus.FOUND);
        } catch (NoSuchElementException e) {
            log.error(String.format("No URL found for %s in the db", shortString));
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ApiResponse(false, "URL not found"));

        }
    }

}
